name: Go package

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  DB_USER: task
  DB_PASSWORD: password
  DB_ROOT_PASSWORD: password
  DB_HOST: localhost
  DB_PORT: 3306
  DB_DATABASE_NAME: task

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_USER: ${{ env.DB_USER}}
          MYSQL_PASSWORD: ${{ env.DB_PASSWORD}}
          MYSQL_ROOT_PASSWORD: ${{ env.DB_ROOT_PASSWORD}}
          MYSQL_HOST: ${{ env.DB_HOST}}
          MYSQL_PORT: ${{ env.DB_PORT}}
          MYSQL_DATABASE: ${{ env.DB_DATABASE_NAME}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v4.0.0
        with:
          go-version: "1.20"

      - name: Install tools
        run: |
          # migrate
          go install -tags mysql github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          # sqlboiler
          go install github.com/volatiletech/sqlboiler/v4@latest
          go install github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-mysql@latest
          # oapi-codegen
          go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest

      - name: Run Migration
        run: migrate -path db/migrations -database "mysql://$DB_USER:$DB_PASSWORD@tcp($DB_HOST:$DB_PORT)/$DB_DATABASE_NAME?multiStatements=true" up

      - name: Generate
        run: |
          sqlboiler mysql
          mkdir -p generated/interfaces/openapi
          oapi-codegen -old-config-style -templates oapi-codegen/templates/ -generate types,server,spec -package openapi -o generated/interfaces/openapi/task.gen.go sample-task-openapi/openapi.yaml

      - name: Build
        run: go build -v ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3.4.0
        with:
          version: latest

      - name: Test
        run: go test -v ./...

      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: physicist00/sample-task-api-go

      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  notify-result:
    runs-on: ubuntu-latest
    if: always()
    needs: build
    steps:
      - name: slack-send
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ needs.build.result }}\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ needs.build.result }}\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
