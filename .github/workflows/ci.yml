name: Go package

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  DB_USER: task
  DB_PASSWORD: password
  DB_ROOT_PASSWORD: password
  DB_HOST: localhost
  DB_PORT: 3306
  DB_DATABASE_NAME: task

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_USER: ${{ env.DB_USER}}
          MYSQL_PASSWORD: ${{ env.DB_PASSWORD}}
          MYSQL_ROOT_PASSWORD: ${{ env.DB_ROOT_PASSWORD}}
          MYSQL_HOST: ${{ env.DB_HOST}}
          MYSQL_PORT: ${{ env.DB_PORT}}
          MYSQL_DATABASE: ${{ env.DB_DATABASE_NAME}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Install tools
        run: |
          # migrate
          go install -tags mysql github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          # sqlboiler
          go install github.com/volatiletech/sqlboiler/v4@latest
          go install github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-mysql@latest
          # oapi-codegen
          go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest

      - name: Run Migration
        run: migrate -path sample-task-golang-migrate/migrations -database "mysql://$DB_USER:$DB_PASSWORD@tcp($DB_HOST:$DB_PORT)/$DB_DATABASE_NAME?multiStatements=true" up

      - name: Generate
        run: |
          sqlboiler mysql
          mkdir -p generated/infrastructure/openapi
          oapi-codegen --config oapi-codegen-config.yaml sample-task-openapi/openapi.yaml

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: physicist00/sample-task-api-go
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  notify-result:
    runs-on: ubuntu-latest
    if: always()
    needs: build
    steps:
      - name: slack-send-success
        if: ${{ needs.build.result == 'success' }}
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            text: ":github: GitHub Action build result: :white_check_mark: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":github: GitHub Action build result: :white_check_mark: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      - name: slack-send-failure
        if: ${{ needs.build.result == 'failure' }}
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            text: ":github: GitHub Action build result: :x: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":github: GitHub Action build result: :x: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
